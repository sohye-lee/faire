// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          Int       @id @default(autoincrement())
  email       String?   @unique
  phone       String?   @unique 
  name        String? 
  avatarUrl   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tokens      Token[]
  products    Product[]
  favorites   Favorite[]
  posts       Post[]
  answers     Answer[]
  votes       Vote[]
}

model Token {
  id          Int       @id @default(autoincrement())
  payload     String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String 
  price       Float
  description String    @db.MediumText
  image       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  favorites   Favorite[]
}

model Favorite {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Post {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int 
  answers     Answer[]
  question    String    @db.MediumText 
  votes       Vote[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Answer {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int 
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int
  content     String    @db.LongText
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Vote {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}