// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id          Int       @id @default(autoincrement())
  email       String?   @unique
  phone       String?   @unique 
  name        String? 
  avatarUrl   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tokens      Token[]
  products    Product[]
  posts       Post[]
  answers     Answer[]
  votes       Vote[]
  writtenReviews    Review[] @relation(name: "writtenReviews")
  receivedReviews   Review[] @relation(name: "receivedReviews")
  records     Record[]        
  streams     Stream[]
  messages    Message[]
}

model Token {
  id          Int       @id @default(autoincrement())
  payload     String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String 
  price       Float
  description String    @db.MediumText
  image       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  latitude    Float?
  longitude   Float?
  records      Record[]        
}

model Post {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int 
  answers     Answer[]
  question    String    @db.MediumText 
  latitude    Float?
  longitude   Float?
  votes       Vote[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Answer {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int 
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int
  content     String    @db.LongText
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Vote {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id          Int       @id @default(autoincrement())
  review      String?    @db.MediumText
  createdBy   User      @relation(name: "writtenReviews",fields: [createdById], references: [id], onDelete: Cascade)
  createdById Int
  createdFor   User     @relation(name: "receivedReviews",fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  score       Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Record {
  id          Int       @id @default(autoincrement())
  type        Type
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Type {
  Purchase
  Sale
  Favorite
}

model Stream {
  id          Int       @id @default(autoincrement())
  name        String 
  description String    @db.MediumText 
  price       Float 
  image       String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Message {
  id          Int       @id @default(autoincrement())
  message     String    @db.MediumText
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  stream      Stream    @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}